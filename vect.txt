#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

class Graph {
private:
    int n; // Number of vertices
    vector<vector<int> > adj; // Adjacency list

public:
    Graph(int n) : n(n), adj(n) {}

    void addEdge(int u, int v) {
        if (find(adj[u].begin(), adj[u].end(), v) == adj[u].end()) {
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    }

    void readGraph() {
        int num_neighbors, neighbor;
        for (int i = 0; i < n; i++) {
            scanf("%d", &num_neighbors);
            for (int j = 0; j < num_neighbors; j++) {
                scanf("%d", &neighbor);
                addEdge(i, neighbor - 1); // Convert to zero-based indexing
            }
        }
    }

    void printDegrees() {
        vector<int> degrees(n);
        for (int i = 0; i < n; i++) {
            degrees[i] = adj[i].size();
        }
        sort(degrees.begin(), degrees.end(), greater<int>());
        for (int i = 0; i < n; i++) {
            printf("%d ", degrees[i]);
        }
        printf("\n");
    }

    int countComponents() {
        int count = 0;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(i, visited);
                count++;
            }
        }
        return count;
    }

    bool isBipartite() {
        vector<int> colors(n, -1);

        for (int i = 0; i < n; i++) {
            if (colors[i] == -1) {
                if (!bfsCheckBipartite(i, colors)) {
                    return false;
                }
            }
        }
        return true;
    }

    void printEccentricities() {
        vector<int> eccentricities(n);
        vector<bool> visited(n, false);

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                vector<int> dist = bfsDistances(i);
                for (int j = 0; j < n; j++) {
                    eccentricities[j] = max(eccentricities[j], dist[j]);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            printf("%d ", eccentricities[i]);
        }
        printf("\n");
    }

    int countEdges() {
        int edgeCount = 0;
        for (int i = 0; i < n; i++) {
            edgeCount += adj[i].size();
        }
        return edgeCount / 2;
    }

    int countComplementEdges() {
        int totalEdges = (n * (n - 1)) / 2; // Total edges in a complete graph
        int graphEdges = countEdges();
        return totalEdges - graphEdges;
    }

    void colorGraph() {
        vector<int> colors(n, -1);

        for (int i = 0; i < n; i++) {
            vector<bool> available(n, true);
            for (int j : adj[i]) {
                if (colors[j] != -1) {
                    available[colors[j]] = false;
                }
            }

            int color;
            for (color = 0; color < n; color++) {
                if (available[color]) {
                    break;
                }
            }

            colors[i] = color;

            for (int j : adj[i]) {
                if (colors[j] != -1) {
                    available[colors[j]] = true;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            printf("%d ", colors[i] + 1);
        }
        printf("\n");
    }

private:
    void dfs(int v, vector<bool>& visited) {
        visited[v] = true;
        for (int u : adj[v]) {
            if (!visited[u]) {
                dfs(u, visited);
            }
        }
    }

    bool bfsCheckBipartite(int s, vector<int>& colors) {
        queue<int> q;
        q.push(s);
        colors[s] = 0;

        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int v : adj[u]) {
                if (colors[v] == -1) {
                    colors[v] = 1 - colors[u];
                    q.push(v);
                } else if (colors[v] == colors[u]) {
                    return false;
                }
            }
        }
        return true;
    }

    vector<int> bfsDistances(int start) {
        vector<int> dist(n, -1);
        queue<int> q;
        q.push(start);
        dist[start] = 0;

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (int neighbor : adj[v]) {
                if (dist[neighbor] == -1) {
                    dist[neighbor] = dist[v] + 1;
                    q.push(neighbor);
                }
            }
        }

        return dist;
    }
};

int main() {
    int k;
    scanf("%d", &k);
    while (k--) {
        int n;
        scanf("%d", &n);
        Graph g(n);
        g.readGraph();
        g.printDegrees();
        printf("%d\n", g.countComponents());
        printf("%s\n", g.isBipartite() ? "T" : "F");
        g.printEccentricities();
        printf("?\n");
        g.colorGraph();
        printf("?\n");
        printf("?\n");
        printf("?\n");
        printf("%d\n", g.countComplementEdges());
    }
    return 0;
}
